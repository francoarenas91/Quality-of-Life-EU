ylab("Sales Income") +
theme(legend.position="bottom") +
#change x axis to positive labels
scale_y_continuous(breaks=seq(-400000,
400000,
100000),
label= as.character(abs(seq(-400000,
400000,
100000)
)
),
limits = c(-40000,40000)
)
ggplot(pop.df) +
aes(x= units, y = income, fill = sex) +
geom_bar(stat = "identity") +
coord_flip() + #transposes x and y
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte()+
xlab("units sold") +
ylab("Sales Income") +
theme(legend.position="bottom") +
#change x axis to positive labels
scale_y_continuous(breaks=seq(-400000,
400000,
100000),
label= as.character(abs(seq(-400000,
400000,
100000))),
limits = c(-40000,40000)
)
ggplot(pop.df) +
aes(x= units, y = income, fill = sex) +
geom_bar(stat = "identity") +
coord_flip() + #transposes x and y
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte()+
xlab("units sold") +
ylab("Sales Income") +
theme(legend.position="bottom") +
#change x axis to positive labels
scale_y_continuous(breaks=seq(-400000,
400000,
100000),
label= as.character(abs(seq(-400000,
400000,
100000))),
# limits = c(-40000,40000)
)
ggplot(pop.df) +
aes(x= units, y = income, fill = sex) +
geom_bar(stat = "identity") +
coord_flip() + #transposes x and y
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte()+
xlab("units sold") +
ylab("Sales Income") +
theme(legend.position="bottom") +
#change x axis to positive labels
scale_y_continuous(breaks=seq(-400000,
400000,
100000),
label= as.character(abs(seq(-400000,
400000,
100000))),
limits = c(-40000,40000)
)
ggplot(pop.df) +
aes(x= units, y = income, fill = sex) +
geom_bar(stat = "identity") +
coord_flip() + #transposes x and y
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte()+
xlab("units sold") +
ylab("Sales Income") +
theme(legend.position="bottom") +
#change x axis to positive labels
scale_y_continuous(breaks=seq(-400000,
400000,
100000),
label= as.character(abs(seq(-400000,
400000,
100000))
),
limits = c(-400000,400000)
)
p.pyr <- ggplot(pop.df) +
aes(x= units, y = income, fill = sex) +
geom_bar(stat = "identity") +
coord_flip() + #transposes x and y
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte()+
xlab("units sold") +
ylab("Sales Income") +
theme(legend.position="bottom") +
#change x axis to positive labels
scale_y_continuous(breaks=seq(-400000,
400000,
100000),
label= as.character(abs(seq(-400000,
400000,
100000))
),
limits = c(-400000,400000)
)
p.pyr
options(Scipen = 99)
p.pyr <- ggplot(pop.df) +
aes(x= units, y = income, fill = sex) +
geom_bar(stat = "identity") +
coord_flip() + #transposes x and y
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte()+
xlab("units sold") +
ylab("Sales Income") +
theme(legend.position="bottom") +
#change x axis to positive labels
scale_y_continuous(breaks=seq(-400000,
400000,
100000),
label= as.character(abs(seq(-400000,
400000,
100000))
),
limits = c(-400000,400000)
)
p.pyr
options(Scipen = 999)
p.pyr <- ggplot(pop.df) +
aes(x= units, y = income, fill = sex) +
geom_bar(stat = "identity") +
coord_flip() + #transposes x and y
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte()+
xlab("units sold") +
ylab("Sales Income") +
theme(legend.position="bottom") +
#change x axis to positive labels
scale_y_continuous(breaks=seq(-400000,
400000,
100000),
label= as.character(abs(seq(-400000,
400000,
100000))
),
limits = c(-400000,400000)
)
p.pyr
#alluvial
p.aluv <- ggplot(my.df) + aes(y=units,
axis1=reg,
axis2=wine)+
geom_alluvium(aes(fill=reg)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
theme_void()+
guides(fill=FALSE) +
scale_fill_manual(values = my.cols)
p.aluv
options(Scipen = 999)
p.pyr <- ggplot(pop.df) +
aes(x= units, y = income, fill = sex) +
geom_bar(stat = "identity") +
coord_flip() + #transposes x and y
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte()+
xlab("units sold") +
ylab("Sales Income") +
theme(legend.position="bottom") +
#change x axis to positive labels
scale_y_continuous(breaks=seq(-400000,
400000,
100000),
label= as.character(abs(seq(-400000,
400000,
100000))
),
limits = c(-400000,400000)
)
p.pyr
options(scipen = 999)
p.pyr <- ggplot(pop.df) +
aes(x= units, y = income, fill = sex) +
geom_bar(stat = "identity") +
coord_flip() + #transposes x and y
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte()+
xlab("units sold") +
ylab("Sales Income") +
theme(legend.position="bottom") +
#change x axis to positive labels
scale_y_continuous(breaks=seq(-400000,
400000,
100000),
label= as.character(abs(seq(-400000,
400000,
100000))
),
limits = c(-400000,400000)
)
p.pyr
my.df.2 <- aggregate(sales$units.sold,
list(wine = sales$wine,
reg = sales$rep.region,
type = sales$type),
sum)
#alluvial
p.aluv <- ggplot(my.df.2) + aes(y=units,
axis1=reg,
axis2=wine)+
geom_alluvium(aes(fill=reg)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
theme_void()+
guides(fill=FALSE) +
scale_fill_manual(values = my.cols)
p.aluv
#alluvial
p.aluv <- ggplot(my.df.2) + aes(y=units,
axis1=reg,
axis2=wine)+
geom_alluvium(aes(fill=reg)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
theme_void()+
guides(fill=FALSE) +
scale_fill_manual(values = my.cols)
colnames(my.df.2)[3] <-"units"
#alluvial
p.aluv <- ggplot(my.df.2) + aes(y=units,
axis1=reg,
axis2=wine)+
geom_alluvium(aes(fill=reg)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
theme_void()+
guides(fill=FALSE) +
scale_fill_manual(values = my.cols)
p.aluv
my.df.2 <- aggregate(sales$units.sold,
list(wine = sales$wine,
reg = sales$rep.region,
type = sales$type),
sum)
colnames(my.df.2)[4] <-"units"
#alluvial
p.aluv <- ggplot(my.df.2) + aes(y=units,
axis1=reg,
axis2=wine)+
geom_alluvium(aes(fill=reg)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
theme_void()+
guides(fill=FALSE) +
scale_fill_manual(values = my.cols)
p.aluv
#alluvial
p.aluv <- ggplot(my.df.2) + aes(y=units,
axis1=reg,
axis2=wine,
axis3=type)+
geom_alluvium(aes(fill=reg)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
theme_void()+
guides(fill=FALSE) +
scale_fill_manual(values = my.cols)
p.aluv
PAQUETES <- c("dplyr","tidyverse","ggplot2","ggmosaic","treemapify","ggalluvial","circlize","ggthemes","ggbeeswarm","ggpubr")
for (el in PAQUETES){
if (!require(el, character.only = TRUE)) {
install.packages(el, repos = "https://cloud.r-project.org")
require(el, character.only = TRUE)
}
}
my.cols <- c("#9D9DD7", "#5555AF","#2F2F9F",
"#171779","#07074f")
ggarrange(p.beeswarm,p.area)
#ggarrage allows to plot several plots
ggarrange(p.beeswarm,p.area,p.tree,
p.aluv,p.pyr,nrow=3)
#ggarrage allows to plot several plots
ggarrange(p.beeswarm,p.area,p.tree,
p.aluv,p.pyr,nrow=3)
#ggarrage allows to plot several plots
ggarrange(p.beeswarm,p.area,p.tree,
p.aluv,p.pyr,nrow=3,
ncol=2)
PAQUETES <- c("dplyr","tidyverse","ggplot2","ggmosaic","treemapify",
"ggalluvial","circlize","ggthemes","ggbeeswarm","ggpubr",
"cowplot")
for (el in PAQUETES){
if (!require(el, character.only = TRUE)) {
install.packages(el, repos = "https://cloud.r-project.org")
require(el, character.only = TRUE)
}
}
sales %>%
ggplot(aes(x=price,y=sales,color=wine)) +
geom_area()
sales %>%
ggplot(aes(x=income,y=sales,color=wine)) +
geom_area()
sales %>%
ggplot(aes(x=unit.price,y=income,color=wine)) +
geom_area()
sales %>%
ggplot(aes(x=unit.price,y=income,color=type)) +
geom_area()
sales %>%
ggplot(aes(x=unit.price,y=income,color=type)) +
geom_bar()
sales %>%
ggplot(aes(x=unit.price,y=income,color=type)) +
geom_col()
sales %>%
ggplot(aes(x=unit.price,y=income,color=type)) +
geom_hist()
sales %>%
ggplot(aes(x=unit.price,color=type)) +
geom_density()
sales %>%
ggplot(aes(x=unit.price,color=type)) +
geom_density(alpha = 0.5)
sales %>%
ggplot(aes(x=unit.price,color=type)) +
geom_density(alpha = 0.5) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
theme_minimal_hgrid(12)
sales %>%
ggplot(aes(x=unit.price,fill=type)) +
geom_density(alpha = 0.5) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
theme_minimal_hgrid(12)
sales %>%
ggplot(aes(x=unit.price,fill=type)) +
geom_density(alpha = 0.5) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
theme_tufte()
sales %>%
ggplot(aes(x=unit.price,fill=type)) +
geom_density(alpha = 0.5) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte()
sales %>%
ggplot(aes(x=income,fill=type)) +
geom_density(alpha = 0.5) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte()
sales %>%
ggplot(aes(x=cost,fill=type)) +
geom_density(alpha = 0.5) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte()
sales %>%
ggplot(aes(x=unit.price,fill=type)) +
geom_density(alpha = 0.5) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte()
sales %>%
ggplot(aes(x=unit.price,fill=type)) +
geom_density(alpha = 0.5) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte() +
x_labs("price")
sales %>%
ggplot(aes(x=unit.price,fill=type)) +
geom_density(alpha = 0.5) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte() +
xlab("price")
sales %>%
ggplot(aes(x=unit.price,fill=type)) +
geom_density(alpha = 0.5) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte() +
xlab("Price")
#ggarrage allows to plot several plots
ggarrange(p.beeswarm,p.area,p.tree,
p.aluv,p.pyr, p.density
nrow=3,
#ggarrage allows to plot several plots
ggarrange(p.beeswarm,p.area,p.tree,
p.aluv,p.pyr, p.density,
nrow=3,
ncol=2)
p.density <- sales %>%
ggplot(aes(x=unit.price,fill=type)) +
geom_density(alpha = 0.5) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte() +
xlab("Price")
#ggarrage allows to plot several plots
ggarrange(p.beeswarm,p.area,p.tree,
p.aluv,p.pyr, p.density,
nrow=3,
ncol=2)
p.density <- sales %>%
ggplot(aes(x=unit.price,fill=type)) +
geom_density(alpha = 0.2) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte() +
xlab("Price")
#ggarrage allows to plot several plots
ggarrange(p.beeswarm,p.area,p.tree,
p.aluv,p.pyr, p.density,
nrow=3,
ncol=2)
p.density <- sales %>%
ggplot(aes(x=unit.price,fill=type)) +
geom_density(alpha = 0.8) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte() +
xlab("Price")
#ggarrage allows to plot several plots
ggarrange(p.beeswarm,p.area,p.tree,
p.aluv,p.pyr, p.density,
nrow=3,
ncol=2)
p.density <- sales %>%
ggplot(aes(x=unit.price,fill=type)) +
geom_density(alpha = 0.2) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_fill_manual(values = my.cols[c(1,5)]) +
theme_tufte() +
xlab("Price")
#ggarrage allows to plot several plots
ggarrange(p.beeswarm,p.area,p.tree,
p.aluv,p.pyr, p.density,
nrow=3,
ncol=2)
p.density <- sales %>%
ggplot(aes(x=unit.price,fill=type)) +
geom_density(alpha = 0.2) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_fill_manual(values = my.cols[c(5,1)]) +
theme_tufte() +
xlab("Price")
#ggarrage allows to plot several plots
ggarrange(p.beeswarm,p.area,p.tree,
p.aluv,p.pyr, p.density,
nrow=3,
ncol=2)
sale_wind <-  tapply(sales$unit.sold,
list(sales$rep.region,
sales$wine),
sum)
sale_wind <-  tapply(sales$units.sold,
list(sales$rep.region,
sales$wine),
sum)
PAQUETES <- c("dplyr","tidyverse","ggplot2","ggmosaic","treemapify",
"ggalluvial","circlize","ggthemes","ggbeeswarm","ggpubr",
"cowplot","circlize")
for (el in PAQUETES){
if (!require(el, character.only = TRUE)) {
install.packages(el, repos = "https://cloud.r-project.org")
require(el, character.only = TRUE)
}
}
PAQUETES <- c("dplyr","tidyverse","ggplot2","ggmosaic","treemapify",
"ggalluvial","circlize","ggthemes","ggbeeswarm","ggpubr",
"cowplot","circlize")
for (el in PAQUETES){
if (!require(el, character.only = TRUE)) {
install.packages(el, repos = "https://cloud.r-project.org")
require(el, character.only = TRUE)
}
}
chordDiagram(sale_wind)
chordDiagram(sale_wind, transparency=.1)
chordDiagram(sale_wind, transparency=.1,big.gap = 80)
chordDiagram(sale_wind, transparency=.1,small.gap = 20)
chordDiagram(sale_wind, transparency=.1,
small.gap = 20, big.gap=40)
chordDiagram(sale_wind, transparency=.1,
small.gap = 10, big.gap=20)
unique(sales$wine)
#set custom colosrs
grid.col = c(
Central = my.cols[1], East = my.cols[2],
North = my.cols[3], South = my.cols[4],
West= my.cols[5],
`Cabernet Sauvignon` = "gray", #bacticks to use spaces in a varaible name
Chardonnay = "gray",
Merlot = "gray",
`Pinot Gris` = "gray",
Riesling = "gray",
Shiraz = "gray",
`Sauvignon Blanc` = "grey"
)
circos.clear()
chordDiagram(sale_wind, grid.col = grid.col, transparency=.1,
small.gap = 0, big.gap=5)
chordDiagram(sale_wind, grid.col = grid.col, transparency=.1,
small.gap = 10, big.gap=30)
