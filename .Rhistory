file_path <- paste0("./dictionaries/","decoding_dict",".xlsx")
# Get a list of all sheet names
sheet_names <- excel_sheets(file_path)
# Load each dictionary sheet
dictionary_df <- lapply(sheet_names, function(sheet) {
read_excel(file_path, sheet = sheet, col_types = c("code" = "text", "name" = "text"))
}) %>% bind_rows()
dictionary <- setNames(dictionary_df$name, dictionary_df$code)
#load EU country names
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx") %>%
rename(country_code=code,country_name=name)
EU_Countries_names_dict<- setNames(EU_countries$country_name, EU_countries$country_code)
#function to load and save country data
load_data_country <- function(series,alias,dictionary,sheet_names){
#load data
data <- get_eurostat(series,
filters=list(geo=pull(EU_countries,country_code))) %>%
filter(!is.na(values)) #filter out NAs
#recode columns
for (sheet in sheet_names){
if (sheet %in% colnames(data)){
data <- data %>%
mutate(!!sym(sheet) := recode(!!sym(sheet), !!!dictionary))
##!!! splits a vector into individual arguments for a function
## !!sym() is a way to convert the string sheet into a symbol that dplyr can understand as a column name.
}
}
save(data, file = paste0("./data/country/",alias, ".RData"))
print(paste0("series ",series," ", alias, " loaded"))
rm(data)
gc()
}
statistics<-read_excel("./loading_statistics.xlsx",sheet="region" )
for (ii in 1:nrow(statistics)) {
load_data_region(statistics$code[ii],statistics$alias[ii],dictionary,sheet_names)
}
# Path to the dictionary fil
file_path <- paste0("./dictionaries/","decoding_dict",".xlsx")
# Get a list of all sheet names
sheet_names <- excel_sheets(file_path)
# Load each dictionary sheet
dictionary_df <- lapply(sheet_names, function(sheet) {
read_excel(file_path, sheet = sheet, col_types = c("code" = "text", "name" = "text"))
}) %>% bind_rows()
dictionary <- setNames(dictionary_df$name, dictionary_df$code)
#load EU country names
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx") %>%
rename(country_code=code,country_name=name)
EU_Countries_names_dict<- setNames(EU_countries$country_name, EU_countries$country_code)
#function to load and save country data
load_data_country <- function(series,alias,dictionary,sheet_names){
#load data
data <- get_eurostat(series,
filters=list(geo=pull(EU_countries,country_code))) %>%
filter(!is.na(values)) #filter out NAs
#recode columns
for (sheet in sheet_names){
if (sheet %in% colnames(data)){
data <- data %>%
mutate(!!sym(sheet) := recode(!!sym(sheet), !!!dictionary))
##!!! splits a vector into individual arguments for a function
## !!sym() is a way to convert the string sheet into a symbol that dplyr can understand as a column name.
}
}
save(data, file = paste0("./data/country/",alias, ".RData"))
print(paste0("series ",series," ", alias, " loaded"))
rm(data)
gc()
}
# List all files in the "./data" directory
data_files <- list.files("./data/region")
# Exclude "geo_dates" from the list
data_files <- data_files[data_files != "geo_dates.RData"]
NUTS2<-read_excel("./dictionaries/NUTS2.xlsx" ) %>%
rename(geo=NUTS2)
geo_dates <- data.frame()
for (file in data_files) {
load(paste0("./data/region/",file))
print(file)
data %>%
select(geo,TIME_PERIOD) %>%
left_join(NUTS2,by="geo") %>%
rbind(geo_dates) %>%
unique() ->geo_dates
}
save(geo_dates, file = paste0("./data/region/","geo_dates", ".RData"))
# List all files in the "./data" directory
data_files <- list.files("./data/region")
# List all files in the "./data" directory
data_files <- list.files("./data/region")
# Exclude "geo_dates" from the list
data_files <- data_files[data_files != "geo_dates.RData"]
NUTS2<-read_excel("./dictionaries/NUTS2.xlsx" ) %>%
rename(geo=NUTS2)
geo_dates <- data.frame()
for (file in data_files) {
load(paste0("./data/region/",file))
print(file)
data %>%
select(geo,TIME_PERIOD) %>%
left_join(NUTS2,by="geo") %>%
rbind(geo_dates) %>%
unique() ->geo_dates
}
save(geo_dates, file = paste0("./data/region/","geo_dates", ".RData"))
# List all files in the "./data" directory
data_files <- list.files("./data/region")
statistics<-read_excel("./loading_statistics.xlsx",sheet="region" )
for (ii in 1:nrow(statistics)) {
load_data_region(statistics$code[ii],statistics$alias[ii],dictionary,sheet_names)
}
# List all files in the "./data" directory
data_files <- list.files("./data/region")
# Exclude "geo_dates" from the list
data_files <- data_files[data_files != "geo_dates.RData"]
NUTS2<-read_excel("./dictionaries/NUTS2.xlsx" ) %>%
rename(geo=NUTS2)
geo_dates <- data.frame()
for (file in data_files) {
load(paste0("./data/region/",file))
print(file)
data %>%
select(geo,TIME_PERIOD) %>%
left_join(NUTS2,by="geo") %>%
rbind(geo_dates) %>%
unique() ->geo_dates
}
save(geo_dates, file = paste0("./data/region/","geo_dates", ".RData"))
EU_countries<-read_excel("./dictionaries/cities.xlsx")
rm(list = ls())
PAQUETES <- c("dplyr","tidyverse","ggplot2","eurostat","readxl")
for (el in PAQUETES){
if (!require(el, character.only = TRUE)) {
install.packages(el, repos = "https://cloud.r-project.org")
require(el, character.only = TRUE)
}
}
# Path to the dictionary fil
file_path <- paste0("./dictionaries/","decoding_dict",".xlsx")
# Get a list of all sheet names
sheet_names <- excel_sheets(file_path)
# Load each dictionary sheet
dictionary_df <- lapply(sheet_names, function(sheet) {
read_excel(file_path, sheet = sheet, col_types = c("code" = "text", "name" = "text"))
}) %>% bind_rows()
dictionary <- setNames(dictionary_df$name, dictionary_df$code)
#load EU country names
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx") %>%
rename(country_code=code,country_name=name)
EU_Countries_names_dict<- setNames(EU_countries$country_name, EU_countries$country_code)
#function to load and save country data
load_data_country <- function(series,alias,dictionary,sheet_names){
#load data
data <- get_eurostat(series,
filters=list(geo=pull(EU_countries,country_code))) %>%
filter(!is.na(values)) #filter out NAs
#recode columns
for (sheet in sheet_names){
if (sheet %in% colnames(data)){
data <- data %>%
mutate(!!sym(sheet) := recode(!!sym(sheet), !!!dictionary))
##!!! splits a vector into individual arguments for a function
## !!sym() is a way to convert the string sheet into a symbol that dplyr can understand as a column name.
}
}
save(data, file = paste0("./data/country/",alias, ".RData"))
print(paste0("series ",series," ", alias, " loaded"))
rm(data)
gc()
}
data <- get_eurostat("urb_clivcon")
data %>% select(indic_ur) %>% unique()
# Path to the dictionary fil
file_path <- paste0("./dictionaries/","decoding_dict",".xlsx")
# Get a list of all sheet names
sheet_names <- excel_sheets(file_path)
# Load each dictionary sheet
dictionary_df <- lapply(sheet_names, function(sheet) {
read_excel(file_path, sheet = sheet, col_types = c("code" = "text", "name" = "text"))
}) %>% bind_rows()
dictionary <- setNames(dictionary_df$name, dictionary_df$code)
#load EU country names
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx") %>%
rename(country_code=code,country_name=name)
EU_Countries_names_dict<- setNames(EU_countries$country_name, EU_countries$country_code)
#function to load and save country data
load_data_country <- function(series,alias,dictionary,sheet_names){
#load data
data <- get_eurostat(series,
filters=list(geo=pull(EU_countries,country_code))) %>%
filter(!is.na(values)) #filter out NAs
#recode columns
for (sheet in sheet_names){
if (sheet %in% colnames(data)){
data <- data %>%
mutate(!!sym(sheet) := recode(!!sym(sheet), !!!dictionary))
##!!! splits a vector into individual arguments for a function
## !!sym() is a way to convert the string sheet into a symbol that dplyr can understand as a column name.
}
}
save(data, file = paste0("./data/country/",alias, ".RData"))
print(paste0("series ",series," ", alias, " loaded"))
rm(data)
gc()
}
data %>% select(cities) %>% unique()
# List all files in the "./data" directory
data_files <- list.files("./data/region")
# Exclude "geo_dates" from the list
data_files <- data_files[data_files != "geo_dates.RData"]
NUTS2<-read_excel("./dictionaries/NUTS2.xlsx" ) %>%
rename(geo=NUTS2)
geo_dates <- data.frame()
for (file in data_files) {
load(paste0("./data/region/",file))
print(file)
data %>%
select(geo,TIME_PERIOD) %>%
left_join(NUTS2,by="geo") %>%
rbind(geo_dates) %>%
unique() ->geo_dates
}
geo_dates %>%
mutate(country_code = substr(geo,1,2))
geo_dates %>%
mutate(country_code = substr(geo,1,2)) %>%
left_join(EU_countries,by="country_code")
# List all files in the "./data" directory
data_files <- list.files("./data/region")
# Exclude "geo_dates" from the list
data_files <- data_files[data_files != "geo_dates.RData"]
NUTS2<-read_excel("./dictionaries/NUTS2.xlsx" ) %>%
rename(geo=NUTS2)
geo_dates <- data.frame()
for (file in data_files) {
load(paste0("./data/region/",file))
print(file)
data %>%
select(geo,TIME_PERIOD) %>%
left_join(NUTS2,by="geo") %>%
rbind(geo_dates) %>%
unique() ->geo_dates
}
#include country names and codes
geo_dates %>%
mutate(country_code = substr(geo,1,2)) %>%
left_join(EU_countries,by="country_code") -> geo_dates
save(geo_dates, file = paste0("./data/region/","geo_dates", ".RData"))
load_data_region <- function(series,alias,dictionary,sheet_names){
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx") %>%
rename(country_code=code,country_name=name)
#load data
data <- get_eurostat(series) %>%
filter(!is.na(values)) %>%  #filter out NAs
mutate(country_code=substr(geo,1,2)) %>%
filter(country_code %in% EU_countries$country_code) %>%
filter(nchar(geo)==4) %>%
select(-country_code) # in is in the date-country data
#recode columns
for (sheet in sheet_names){
if (sheet %in% colnames(data)){
data <- data %>%
mutate(!!sym(sheet) := recode(!!sym(sheet), !!!dictionary))
##!!! splits a vector into individual arguments for a function
## !!sym() is a way to convert the string sheet into a symbol that dplyr can understand as a column name.
}
}
save(data, file = paste0("./data/region/",alias, ".RData"))
print(paste0("series ",series," ", alias, " loaded"))
rm(data)
gc()
}
statistics<-read_excel("./loading_statistics.xlsx",sheet="region" )
for (ii in 1:nrow(statistics)) {
load_data_region(statistics$code[ii],statistics$alias[ii],dictionary,sheet_names)
}
data <- get_eurostat("urb_clivcon")
statistics<-read_excel("./loading_statistics.xlsx",sheet="city" )
for (ii in 1:nrow(statistics)) {
load_data_city(statistics$code[ii],statistics$alias[ii],dictionary,sheet_names)
}
load_data_city <- function(series,alias,dictionary,sheet_names){
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx") %>%
rename(country_code=code,country_name=name)
#load data
data <- get_eurostat(series) %>%
filter(!is.na(values)) %>%  #filter out NAs
mutate(country_code=substr(indic_ur,1,2)) %>%
filter(country_code %in% EU_countries$country_code) %>%
filter(nchar(geo)==6) %>%
select(-country_code)
#recode columns
for (sheet in sheet_names){
if (sheet %in% colnames(data)){
data <- data %>%
mutate(!!sym(sheet) := recode(!!sym(sheet), !!!dictionary))
##!!! splits a vector into individual arguments for a function
## !!sym() is a way to convert the string sheet into a symbol that dplyr can understand as a column name.
}
}
save(data, file = paste0("./data/city/",alias, ".RData"))
print(paste0("series ",series," ", alias, " loaded"))
rm(data)
gc()
}
statistics<-read_excel("./loading_statistics.xlsx",sheet="city" )
for (ii in 1:nrow(statistics)) {
load_data_city(statistics$code[ii],statistics$alias[ii],dictionary,sheet_names)
}
load_data_city <- function(series,alias,dictionary,sheet_names){
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx") %>%
rename(country_code=code,country_name=name)
#load data
data <- get_eurostat(series) %>%
filter(!is.na(values)) %>%  #filter out NAs
mutate(country_code=substr(indic_ur,1,2)) %>%
filter(country_code %in% EU_countries$country_code) %>%
filter(nchar(indic_ur)==6) %>%
select(-country_code)
#recode columns
for (sheet in sheet_names){
if (sheet %in% colnames(data)){
data <- data %>%
mutate(!!sym(sheet) := recode(!!sym(sheet), !!!dictionary))
##!!! splits a vector into individual arguments for a function
## !!sym() is a way to convert the string sheet into a symbol that dplyr can understand as a column name.
}
}
save(data, file = paste0("./data/city/",alias, ".RData"))
print(paste0("series ",series," ", alias, " loaded"))
rm(data)
gc()
}
load_data_city <- function(series,alias,dictionary,sheet_names){
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx") %>%
rename(country_code=code,country_name=name)
#load data
data <- get_eurostat(series) %>%
filter(!is.na(values)) %>%  #filter out NAs
mutate(country_code=substr(cities,1,2)) %>%
filter(country_code %in% EU_countries$country_code) %>%
filter(nchar(cities)==6) %>%
select(-country_code)
#recode columns
for (sheet in sheet_names){
if (sheet %in% colnames(data)){
data <- data %>%
mutate(!!sym(sheet) := recode(!!sym(sheet), !!!dictionary))
##!!! splits a vector into individual arguments for a function
## !!sym() is a way to convert the string sheet into a symbol that dplyr can understand as a column name.
}
}
save(data, file = paste0("./data/city/",alias, ".RData"))
print(paste0("series ",series," ", alias, " loaded"))
rm(data)
gc()
}
statistics<-read_excel("./loading_statistics.xlsx",sheet="city" )
for (ii in 1:nrow(statistics)) {
load_data_city(statistics$code[ii],statistics$alias[ii],dictionary,sheet_names)
}
# List all files in the "./data" directory
data_files <- list.files("./data/city")
# Exclude "geo_dates" from the list
data_files <- data_files[data_files != "geo_dates.RData"]
cities<-read_excel("./dictionaries/cities.xlsx" )
cities<-read_excel("./dictionaries/cities.xlsx" ) %>%
rename(city_name=NAME)
# List all files in the "./data" directory
data_files <- list.files("./data/city")
# Exclude "geo_dates" from the list
data_files <- data_files[data_files != "geo_dates.RData"]
cities<-read_excel("./dictionaries/cities.xlsx" ) %>%
rename(city_name=NAME)
geo_dates <- data.frame()
for (file in data_files) {
load(paste0("./data/city/",file))
print(file)
data %>%
select(cities,TIME_PERIOD) %>%
left_join(cities,by=c("cities"="CODE")) %>%
rbind(geo_dates) %>%
unique() ->geo_dates
}
load_data_city <- function(series,alias,dictionary,sheet_names){
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx") %>%
rename(country_code=code,country_name=name)
#load data
data <- get_eurostat(series) %>%
filter(!is.na(values)) %>%  #filter out NAs
mutate(country_code=substr(cities,1,2)) %>%
filter(country_code %in% EU_countries$country_code) %>%
filter(nchar(cities)==6) %>%
select(-country_code) %>%
rename(city_code=cities)
#recode columns
for (sheet in sheet_names){
if (sheet %in% colnames(data)){
data <- data %>%
mutate(!!sym(sheet) := recode(!!sym(sheet), !!!dictionary))
##!!! splits a vector into individual arguments for a function
## !!sym() is a way to convert the string sheet into a symbol that dplyr can understand as a column name.
}
}
save(data, file = paste0("./data/city/",alias, ".RData"))
print(paste0("series ",series," ", alias, " loaded"))
rm(data)
gc()
}
statistics<-read_excel("./loading_statistics.xlsx",sheet="city" )
for (ii in 1:nrow(statistics)) {
load_data_city(statistics$code[ii],statistics$alias[ii],dictionary,sheet_names)
}
# List all files in the "./data" directory
data_files <- list.files("./data/city")
# Exclude "geo_dates" from the list
data_files <- data_files[data_files != "geo_dates.RData"]
cities<-read_excel("./dictionaries/cities.xlsx" ) %>%
rename(city_name=NAME)
# List all files in the "./data" directory
data_files <- list.files("./data/city")
# Exclude "geo_dates" from the list
data_files <- data_files[data_files != "geo_dates.RData"]
cities<-read_excel("./dictionaries/cities.xlsx" ) %>%
rename(city_name=NAME)
geo_dates <- data.frame()
for (file in data_files) {
load(paste0("./data/city/",file))
print(file)
data %>%
select(cities,TIME_PERIOD) %>%
left_join(cities,by=c("city_code"="CODE")) %>%
rbind(geo_dates) %>%
unique() ->geo_dates
}
geo_dates <- data.frame()
for (file in data_files) {
load(paste0("./data/city/",file))
print(file)
data %>%
select(city_code,TIME_PERIOD) %>%
left_join(cities,by=c("city_code"="CODE")) %>%
rbind(geo_dates) %>%
unique() ->geo_dates
}
#include country names and codes
geo_dates %>%
mutate(country_code = substr(city_code,1,2)) %>%
left_join(EU_countries,by="country_code") -> geo_dates
save(geo_dates, file = paste0("./data/city/","geo_dates", ".RData"))
# Path to the dictionary fil
file_path <- paste0("./dictionaries/","decoding_dict",".xlsx")
# Get a list of all sheet names
sheet_names <- excel_sheets(file_path)
# Load each dictionary sheet
dictionary_df <- lapply(sheet_names, function(sheet) {
read_excel(file_path, sheet = sheet, col_types = c("code" = "text", "name" = "text"))
}) %>% bind_rows()
dictionary <- setNames(dictionary_df$name, dictionary_df$code)
#load EU country names
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx") %>%
rename(country_code=code,country_name=name)
EU_Countries_names_dict<- setNames(EU_countries$country_name, EU_countries$country_code)
#function to load and save country data
load_data_country <- function(series,alias,dictionary,sheet_names){
#load data
data <- get_eurostat(series,
filters=list(geo=pull(EU_countries,country_code))) %>%
filter(!is.na(values)) #filter out NAs
#recode columns
for (sheet in sheet_names){
if (sheet %in% colnames(data)){
data <- data %>%
mutate(!!sym(sheet) := recode(!!sym(sheet), !!!dictionary))
##!!! splits a vector into individual arguments for a function
## !!sym() is a way to convert the string sheet into a symbol that dplyr can understand as a column name.
}
}
save(data, file = paste0("./data/country/",alias, ".RData"))
print(paste0("series ",series," ", alias, " loaded"))
rm(data)
gc()
}
load_data_city <- function(series,alias,dictionary,sheet_names){
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx") %>%
rename(country_code=code,country_name=name)
#load data
data <- get_eurostat(series) %>%
filter(!is.na(values)) %>%  #filter out NAs
mutate(country_code=substr(cities,1,2)) %>%
filter(country_code %in% EU_countries$country_code) %>%
filter(nchar(cities)==6) %>%
select(-country_code) %>%
rename(city_code=cities)
#recode columns
for (sheet in sheet_names){
if (sheet %in% colnames(data)){
data <- data %>%
mutate(!!sym(sheet) := recode(!!sym(sheet), !!!dictionary))
##!!! splits a vector into individual arguments for a function
## !!sym() is a way to convert the string sheet into a symbol that dplyr can understand as a column name.
}
}
save(data, file = paste0("./data/city/",alias, ".RData"))
print(paste0("series ",series," ", alias, " loaded"))
rm(data)
gc()
}
statistics<-read_excel("./loading_statistics.xlsx",sheet="city" )
for (ii in 1:nrow(statistics)) {
load_data_city(statistics$code[ii],statistics$alias[ii],dictionary,sheet_names)
}
